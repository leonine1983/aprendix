
from django import forms
from django.utils.safestring import mark_safe
import random
import string
from rh.models import Uf_Unidade_Federativa, Sexo
from gestao_escolar.models import (Alunos, Cidade)
import re
from django.core.exceptions import ValidationError   
from django.contrib import messages                             

choices = {
    ('1','A+'),
    ('2','A-'),
    ('3','B+'),
    ('4','B-'),
    ('5','AB+'),
    ('6','AB-'),
    ('7','O+'),
    ('8','O-'),    
    ('0','N√£o informado')
}

# Valida√ß√£o de formul√°rio
def validate_caracteres_especiais(value):
    if re.search(r"[~`¬¥'^]", value):
        raise ValidationError('N√£o √© permitido usar acentos ou caracteres especiais (~, `, ¬¥, ^).')


class Alunos_form(forms.ModelForm):
    nome_completo = forms.CharField(
        label='Nome Completo do Aluno (Igual ao do RG bem assim):',
        widget=forms.TextInput(attrs={
            'class': 'form-control border border-info bg-light p-3 pb-3 text-info text-uppercase col m-2 rounded-1',
            'autocomplete': 'off'}),        
    )
    
    def clean_nome_completo(self):
        nome_completo = self.cleaned_data.get('nome_completo')
        # Express√£o regular para bloquear caracteres especiais e acentuados
        if re.search(r"[^a-zA-Z√á√ß\s]", nome_completo):
            mensagem_erro = "‚ö†Ô∏è Percebemos que voc√™ usou acento no 'Nome completo' do aluno. Evite acentos, n√∫meros e caracteres especiais ‚ùå e tente novamente."        
            raise forms.ValidationError(mensagem_erro)
        return nome_completo   
    
    
    nome_mae = forms.CharField(      
        label=mark_safe('<i class="fa-solid fa-user-tie-hair"></i>Nome completo da M√£e ou Respons√°vel'),
        widget=forms.TextInput(attrs={
            'class': 'form-control border border-info p-3 pb-3 text-info text-uppercase col m-2 rounded-1',
            'autocomplete': 'off'}),
    )
    CPF_mae = forms.CharField(      
        label=mark_safe('<i class="fa-solid fa-user-tie-hair"></i>Digite o CPF da m√£e ou respons√°vel'),
        widget=forms.TextInput(attrs={
            'class': 'form-control border border-info p-3 pb-3 text-info text-uppercase col m-2 rounded-1',
            'autocomplete': 'off'}),    
    )

    def clean_nome_mae(self):
        nome_mae = self.cleaned_data.get('nome_mae')
        if re.search(r"[^a-zA-Z√á√ß\s]", nome_mae):
            mensagem_erro = "‚ö†Ô∏è Percebemos que voc√™ usou acento no 'Nome da m√£e' do aluno. Evite acentos, n√∫meros e caracteres especiais ‚ùå e tente novamente. Obrigado pela colabora√ß√£o! üòÑ"    
            raise forms.ValidationError(mensagem_erro)
        return nome_mae    
    

    class Meta:
        validators=[validate_caracteres_especiais],  
        model = Alunos
        fields = ['nome_completo', 'nome_mae', 'CPF_mae']


choice_estado_civil = {
    ('1', 'Solteiro'),
    ('2', 'Casado'),
    ('3', 'Separado'),
    ('4', 'Divorciado'),
    ('5', 'Vi√∫vo'),
    ('6', 'Uni√£o Est√°vel'),
}
choice_modelo_certidao = {
    ('1', 'Antigo'),
    ('2', 'Novo'),
    ('3', 'Nenhuma')
}

choice_justifica_falta_document= {
    ('1', 'o(a) aluno(a) n√£o possui os documentos pessoais solicitados'),
    ('2', 'A escola n√£o disp√µe ou n√£o recebeu os docum. pessoais do(a) aluno(a)')    
}


import random
import string
from django import forms

class Aluno_documento_form(forms.ModelForm):   
    class Meta:
        model = Alunos
        fields = ['aluno', 'CPF', 'RG', 'RG_emissao', 'RG_UF', 'orgao_emissor','nacionalidade','estado_naturalidade', 
                 'cidade_naturalidade', 'estado', 'cidade', 'bairro', 'rua', 'login_aluno', 'senha', 
                 'cartao_nacional_saude_cns', 'nis', 'inep', 'estado_civil', 'tipo_certidao', 
                 'numero_certidao', 'livro', 'folha', 'termo', 'emissao', 'distrito_certidao', 
                 'cartorio', 'comarca', 'cartorio_uf', 'justificativa_falta_documento', 
                 'local_diferenciado', 'obito', 'data_obito']
    
    aluno = forms.ModelChoiceField(
        queryset=Alunos.objects.none(),
        widget=forms.Select(attrs={'class': 'border border-info p-2 pb-1 bg-transparent text-info col m-2 rounded-1', 'readonly': 'readonly'}),
        required=False
    )
    
    # Alterado de ChoiceField para CharField para campos din√¢micos
    estado = forms.CharField(
        widget=forms.Select(attrs={
            'class': 'border border-info p-2 pb-1 bg-transparent text-info col m-2 rounded-1',
            'id': 'id_estado',
            'onchange': 'carregarCidades()'
        }),
        required=False
    )
    
    cidade = forms.CharField(
        widget=forms.Select(attrs={
            'class': 'border border-info p-2 pb-1 bg-transparent text-info col m-2 rounded-1',
            'id': 'id_cidade',
            'onchange': 'carregarBairros()',
            'disabled': 'disabled'
        }),
        required=False
    )
    
    bairro = forms.CharField(
        widget=forms.Select(attrs={
            'class': 'border border-info p-2 pb-1 bg-transparent text-info col m-2 rounded-1',
            'id': 'id_bairro',
            'disabled': 'disabled'
        }),
        required=False
    )
    
    estado_naturalidade = forms.CharField(
        widget=forms.Select(attrs={
            'class': 'border border-info p-2 pb-1 bg-transparent text-info col m-2 rounded-1',
            'id': 'id_estado_naturalidade',
            'onchange': 'carregarCidadesNaturalidade()'
        }),
        required=False
    )
    
    cidade_naturalidade = forms.CharField(
        widget=forms.Select(attrs={
            'class': 'border border-info p-2 pb-1 bg-transparent text-info col m-2 rounded-1',
            'id': 'id_cidade_naturalidade',
            'disabled': 'disabled'
        }),
        required=False
    )
    
    def __init__(self, *args, **kwargs):
        # Remove o aluno_create dos kwargs antes de chamar o super()
        self.aluno_create = kwargs.pop('aluno_create', None)
        super().__init__(*args, **kwargs)
        
        if self.aluno_create is not None:
            self.fields['aluno'].queryset = self.aluno_create
            self.fields['aluno'].initial = self.aluno_create.first()    
            self.fields['login_aluno'].initial = self.generate_login()           
            self.fields['senha'].initial = "12345678"
        
        # Carrega os estados brasileiros
        estados_brasileiros = [
            ('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amap√°'), ('AM', 'Amazonas'),
            ('BA', 'Bahia'), ('CE', 'Cear√°'), ('DF', 'Distrito Federal'), ('ES', 'Esp√≠rito Santo'),
            ('GO', 'Goi√°s'), ('MA', 'Maranh√£o'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'),
            ('MG', 'Minas Gerais'), ('PA', 'Par√°'), ('PB', 'Para√≠ba'), ('PR', 'Paran√°'),
            ('PE', 'Pernambuco'), ('PI', 'Piau√≠'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'),
            ('RS', 'Rio Grande do Sul'), ('RO', 'Rond√¥nia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'),
            ('SP', 'S√£o Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins')
        ]
        
        # Atualiza os widgets Select com as op√ß√µes de estado
        self.fields['estado'].widget.choices = [('', 'Selecione um estado')] + estados_brasileiros
        self.fields['estado_naturalidade'].widget.choices = [('', 'Selecione um estado')] + estados_brasileiros
    
    def clean_cidade(self):
        """Valida√ß√£o personalizada para o campo cidade"""
        cidade = self.cleaned_data.get('cidade')
        # Aqui voc√™ pode adicionar valida√ß√µes adicionais se necess√°rio
        return cidade
    
    def clean_cidade_naturalidade(self):
        """Valida√ß√£o personalizada para o campo cidade_naturalidade"""
        cidade = self.cleaned_data.get('cidade_naturalidade')
        # Aqui voc√™ pode adicionar valida√ß√µes adicionais se necess√°rio
        return cidade
    
    def clean_bairro(self):
        """Valida√ß√£o personalizada para o campo bairro"""
        bairro = self.cleaned_data.get('bairro')
        # Aqui voc√™ pode adicionar valida√ß√µes adicionais se necess√°rio
        return bairro
    
    def generate_login(self):
        while True:
            letra = random.choice(string.ascii_lowercase)
            numero = ''.join(random.choices(string.digits + string.digits, k=5))
            login = f'{letra}/{numero}'
            if not Alunos.objects.filter(login_aluno=login).exists():
                return login